from aiogram import Router, F, types
from aiogram.filters import Command
from decimal import Decimal
from src.logger import setup_logger
from src.redis.services import redis_manager
from src.database.orm.users import add_balance


router = Router(name="get_bonus")
logger = setup_logger(__name__)


@router.message(F.text == "!–±–æ–Ω—É—Å")
@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å")
@router.message(Command("bonus"))
async def get_bonus(message: types.Message):
    user_id = message.from_user.id
    status = await redis_manager.get(f"user:{user_id}:bonus")

    if status == "–ù–µ –ø—Ä–æ—à–ª–æ 2 —á–∞—Å–∞":
        await message.answer(text="‚åõÔ∏è –ë–æ–Ω—É—Å –∞–∫—Ç–∏–≤–µ–Ω –∫–∞–∂–¥—ã–µ: 2 —á–∞—Å–∞")
    else:
        try:
            await redis_manager.set_with_ttl(key=f"user:{user_id}:bonus", value="–ù–µ –ø—Ä–æ—à–ª–æ 2 —á–∞—Å–∞", ttl=7200)
            value = 1000
            added = await add_balance(
                user_id=user_id,
                add_to=Decimal(value),
            )
            await message.answer(f"üéÅ –ï–ª–∏–∑–∞–±–µ—Ç, –í—ã –ø–æ–ª—É—á–∏–ª–∏ üí†{added['value']}, —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å üí†{added['balance']} \
\n‚åõÔ∏è –ú–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑: 2 —á–∞—Å–∞")
        except Exception as e:
            logger.error(e)
            await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")