from aiogram import Router, F, types
from aiogram.filters import Command
from decimal import Decimal
from src.logger import setup_logger
from src.redis.services import redis_manager
from src.database.orm.users import add_balance


router = Router(name="get_bonus")
logger = setup_logger(__name__)


import time
from datetime import timedelta

@router.message(F.text == "üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å")
@router.message(Command("bonus"))
async def get_bonus(message: types.Message):
    user_id = message.from_user.id
    key = f"user:{user_id}:bonus"

    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –∏–∑ Redis
    last_bonus_time = await redis_manager.get(key)

    if last_bonus_time:
        try:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ int (timestamp)
            last_bonus_time = int(last_bonus_time)
        except ValueError:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è timestamp, —É–¥–∞–ª—è–µ–º –∫–ª—é—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç–∞–º –±—ã–ª–∞ —Å—Ç—Ä–æ–∫–∞ "–ù–µ –ø—Ä–æ—à–ª–æ 2 —á–∞—Å–∞")
            await redis_manager.delete(key)
            last_bonus_time = None

    if last_bonus_time:
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        remaining_time = 7200 - (int(time.time()) - last_bonus_time)
        if remaining_time > 0:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤, –º–∏–Ω—É—Ç –∏ —Å–µ–∫—É–Ω–¥
            delta = timedelta(seconds=remaining_time)
            hours, remainder = divmod(delta.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            await message.answer(f"‚åõÔ∏è –ë–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: {hours}—á {minutes}–º {seconds}—Å")
            return

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ Redis —Å TTL 2 —á–∞—Å–∞
        await redis_manager.set_with_ttl(key=key, value=str(int(time.time())), ttl=7200)

        value = 1000
        added = await add_balance(
            user_id=user_id,
            add_to=Decimal(value),
        )
        await message.answer(f"üéÅ {message.from_user.id}, –í—ã –ø–æ–ª—É—á–∏–ª–∏ üí†{added['value']}, —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å üí†{added['balance']} \
\n‚åõÔ∏è –ú–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑: 2 —á–∞—Å–∞")
    except Exception as e:
        logger.error(e)
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")