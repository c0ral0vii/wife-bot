from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from src.redis.services import redis_manager
from src.database.orm.wifes import add_random_wifes_to_redis, get_character
from aiogram.filters import Command, StateFilter
import datetime
from src.database.models import Wife, AllRares
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from src.database.orm.users import create_user
from aiogram.fsm.state import State, StatesGroup


router = Router()


class EverydayShop(StatesGroup):
    shop = State()

@router.message(Command("everyday_shop"))
async def everyday_shop(message: types.Message, state: FSMContext):
    await add_random_wifes_to_redis(user_id=message.from_user.id)
    await state.clear()
    await state.set_state(EverydayShop.shop)
    redis_client = await redis_manager.get_redis()
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    current_date = datetime.datetime.now().strftime("%Y-%m-%d")
    redis_key = f"shop:{current_date}:{message.from_user.id}"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis
    shop_data = await redis_client.hgetall(redis_key)

    if not shop_data:
        await message.answer("–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    user_data = await create_user(data={
        "user_id": message.from_user.id
    })
    message_text = f"{message.from_user.username}, –≤–∞—à –±–∞–ª–∞–Ω—Å - üî∞{user_data.get("data").alter_balance}\n–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω:\n"
    kb = []
    for rarity, wife_id in shop_data.items():
        wife_id = int(wife_id)
        wife = await get_character(id=wife_id)
        if wife:
            if wife.rare == AllRares.SIMPLE:
                price = 10
                rare = "‚ö™Ô∏è"
      
            if wife.rare == AllRares.RARE:
                price = 15
                rare = "üü¢"

            if wife.rare == AllRares.EPIC:
                price = 20
                rare = "üü£"

            if wife.rare == AllRares.LEGENDARY:
                price = 30
                rare = "üü†"
            

            response = f"{wife.name} - {rare}{wife.rare.value} - üî∞{price} | (ID: {wife.id})\n"
            kb.append([InlineKeyboardButton(text=response, callback_data=f"everaday_shop_{price}_{wife.id}")])
    kb.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh")])

    await message.answer(message_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))


@router.callback_query(F.data == "refresh", StateFilter(EverydayShop))
async def shop_refresh(callback: types.CallbackQuery, state: FSMContext):
    await add_random_wifes_to_redis(user_id=callback.from_user.id, refresh=True)
    
    await state.set_state(EverydayShop.shop)
    redis_client = await redis_manager.get_redis()
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    current_date = datetime.datetime.now().strftime("%Y-%m-%d")
    redis_key = f"shop:{current_date}:{callback.from_user.id}"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis
    shop_data = await redis_client.hgetall(redis_key)

    if not shop_data:
        await callback.message.answer("–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    user_data = await create_user(data={
        "user_id": callback.from_user.id
    })
    message_text = f"{callback.from_user.username}, –≤–∞—à –±–∞–ª–∞–Ω—Å - üî∞{user_data.get("data").alter_balance}\n–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω:\n"
    kb = []
    for rarity, wife_id in shop_data.items():
        wife_id = int(wife_id)
        wife = await get_character(id=wife_id)
        if wife:
            if wife.rare == AllRares.SIMPLE:
                price = 10
                rare = "‚ö™Ô∏è"
      
            if wife.rare == AllRares.RARE:
                price = 15
                rare = "üü¢"

            if wife.rare == AllRares.EPIC:
                price = 20
                rare = "üü£"

            if wife.rare == AllRares.LEGENDARY:
                price = 30
                rare = "üü†"

            response = f"{wife.name} - {rare}{wife.rare.value} - üî∞{price} | (ID: {wife.id})\n"
            kb.append([InlineKeyboardButton(text=response, callback_data=f"everaday_shop_{price}")])
    kb.append([InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh")])

    await callback.message.answer(message_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))


@router.callback_query(F.data.startswith("everaday_shop_"), StateFilter(EverydayShop))
async def buy_from_everyday_shop(callback: types.CallbackQuery):
    