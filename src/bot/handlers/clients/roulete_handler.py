from aiogram import Router, F, types, Bot
from aiogram.filters import Command, StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from src.logger import setup_logger
from src.database.orm.roulete import spin_character
from src.database.orm.users import remove_balance
from decimal import Decimal
import os
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from src.database.orm.find import find_characters
from src.database.orm.users import get_user

router = Router()
logger = setup_logger(__name__)

@router.callback_query(F.data == "spins")
async def call_spin(callback: types.CallbackQuery):
    await roulte_characters(message=callback.message)


@router.message(F.text == "üé° –ö—Ä—É—Ç–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
@router.message(Command("spin"))
async def mess_spin(message: types.Message):
    await roulte_characters(message=message)


async def roulte_characters(message: types.Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂: üí† 250", callback_data="random_spin")],
            [InlineKeyboardButton(text="–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞–π—Ç–ª–∞: üí† 500", callback_data="select_spin")],

        ]
    )
    await message.answer(f"üéü{message.from_user.username}, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –æ–ø—Ü–∏—é::", reply_markup=kb)


@router.callback_query(F.data == "random_spin")
async def random_spin_handler(callback: types.CallbackQuery, bot: Bot):
    try:
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        balance = await remove_balance(user_id=callback.from_user.id, amount_to_remove=Decimal(250))
        if balance is False:
            await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            return

        result = await spin_character(user_id=callback.from_user.id)
        user = await get_user(user_id=callback.from_user.id)
        user_photo_path = f"./media/wifes/{result.id}/profile.png"
        default_photo_path = "./media/wifes/default.png"

        if os.path.exists(user_photo_path) and os.path.isfile(user_photo_path):
            photo = types.FSInputFile(path=user_photo_path)
        else:
            photo = types.FSInputFile(path=default_photo_path)
        wife_rare = result.rare.value
        if wife_rare == "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π":
            color = "üü†"
        elif wife_rare == "–†–µ–¥–∫–∏–π":
            color = "üü¢"
        elif wife_rare == "–û–±—ã—á–Ω—ã–π":
            color = "‚ö™Ô∏è"
        else:
            color = "üü£" 
        await callback.message.answer_photo(photo=photo, caption=f"""{callback.from_user.username}, –≤–∞–º –≤—ã–ø–∞–ª: \nüÜî {result.id} \nüë§ –ü–æ–ª–Ω–æ–µ –∏–º—è: {result.name} \nüå∏ –¢–∞–π—Ç–ª: {result.from_.split(",")[0]} \nüíé –†–µ–¥–∫–æ—Å—Ç—å: {color}{result.rare.value}\n\n–û—Å—Ç–∞–ª–æ—Å—å üí†{user.balance}""", reply_markup=InlineKeyboardMarkup(
                                       inline_keyboard=[
                                           [InlineKeyboardButton(text="üë§–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ –∞–≤—É", callback_data=f"set_on_photo_{result.id}")],
                                           [InlineKeyboardButton(text="üîÑ–ö—Ä—É—Ç–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="random_spin")]
                                       ]
                                   ))
    except ValueError as e:
        await callback.message.answer(str(e), reply_markup=InlineKeyboardMarkup(
                                       inline_keyboard=[
                                           [InlineKeyboardButton(text="üîÑ–ö—Ä—É—Ç–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="random_spin")]
                                       ]
                                   ))


class TitleState(StatesGroup):
    title = State()


@router.callback_query(F.data == "select_spin")
async def select_spin(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(TitleState.title)
    await state.update_data(use_user_id=callback.from_user.id)
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ —Ç–∞–π—Ç–ª –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—Ä—É—Ç–∏—Ç—å:")


@router.message(F.text, StateFilter(TitleState))
async def title_spin(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if int(message.from_user.id) != int(data["use_user_id"]):
        return
    
    title = message.text
    
    result = await find_characters(text=title, from_title=True)
    if not result:
        await message.answer("–ü–æ –¥–∞–Ω–Ω–æ–º—É —Ç–∞–π—Ç–ª—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∏")
        return
    try:
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        balance = await remove_balance(user_id=message.from_user.id, amount_to_remove=Decimal(250))
        if balance is False:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            return

        result = await spin_character(user_id=message.from_user.id, characters=result)
        user = await get_user(user_id=message.from_user.id)
        user_photo_path = f"./media/wifes/{result.id}/profile.png"
        default_photo_path = "./media/wifes/default.png"

        if os.path.exists(user_photo_path) and os.path.isfile(user_photo_path):
            photo = types.FSInputFile(path=user_photo_path)
        else:
            photo = types.FSInputFile(path=default_photo_path)
        wife_rare = result.rare.value
        if wife_rare == "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π":
            color = "üü†"
        elif wife_rare == "–†–µ–¥–∫–∏–π":
            color = "üü¢"
        elif wife_rare == "–û–±—ã—á–Ω—ã–π":
            color = "‚ö™Ô∏è"
        else:
            color = "üü£" 

        await message.answer_photo(photo=photo, caption=f"{message.from_user.username}, –≤–∞–º –≤—ã–ø–∞–ª {color}{result.name} ({result.from_.split(",")[0]}) –æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –≤–∞—à –≥–æ—Ä–µ–º\n\n–û—Å—Ç–∞–ª–æ—Å—å üí†{user.balance}", reply_markup=InlineKeyboardMarkup(
                                       inline_keyboard=[
                                           [InlineKeyboardButton(text="üë§–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ –∞–≤—É", callback_data=f"set_on_photo_{result.id}")],
                                           [InlineKeyboardButton(text="üîÑ–ö—Ä—É—Ç–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="select_spin")]
                                       ]
                                   ))
    except ValueError as e:
        await message.answer(str(e), reply_markup=InlineKeyboardMarkup(
                                       inline_keyboard=[
                                           [InlineKeyboardButton(text="üîÑ–ö—Ä—É—Ç–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="select_spin")]
                                       ]
                                   ))