from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from src.logger import setup_logger
from src.database.orm.roulete import spin_character
from src.database.orm.users import remove_balance
from src.database.models import Sex
from decimal import Decimal
import os
import asyncio


router = Router()
logger = setup_logger(__name__)


@router.message(F.text == "–ö—Ä—É—Ç–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
@router.message(F.text == "!–∫—Ä—É—Ç–∏—Ç—å")
@router.message(Command("spin"))
async def roulte_characters(message: types.Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="-—Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–ø–∞–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (250 –≤–∞–ª—é—Ç—ã)", callback_data="random_spin")],
            [InlineKeyboardButton(text="-—Å–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞ (350 –≤–∞–ª—é—Ç—ã)", callback_data="women_spin")],
            [InlineKeyboardButton(text="-—Å–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞ (350 –≤–∞–ª—é—Ç—ã)", callback_data="man_spin")],
            [InlineKeyboardButton(text="-–ø–µ—Ä—Å–æ–Ω–∞–∂ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–Ω–∏–º–µ/–∏–≥—Ä—ã –∏ —Ç.–ø (500 –≤–∞–ª—é—Ç—ã)", callback_data="select_spin")],

        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –≤–∏–¥ –∫—Ä—É—Ç–∫–∏:", reply_markup=kb)


@router.callback_query(F.data == "random_spin")
async def random_spin_handler(callback: types.CallbackQuery, bot: Bot):
    try:
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        balance = await remove_balance(user_id=callback.from_user.id, amount_to_remove=Decimal(250))
        if balance is False:
            await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            return
        message = await bot.send_dice(callback.message.chat.id, emoji='üé∞')
        await asyncio.sleep(2)
        await message.delete()

        character = await spin_character(user_id=callback.from_user.id)
        user_photo_path = f"./media/wifes/{character.id}/profile.png"
        default_photo_path = "./media/wifes/default/default.png"

        if os.path.exists(user_photo_path) and os.path.isfile(user_photo_path):
            photo = types.FSInputFile(path=user_photo_path)
        else:
            photo = types.FSInputFile(path=default_photo_path)

        await callback.message.answer_photo(photo=photo, caption=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {character.name} ({character.rare.value})")
    except ValueError as e:
        await callback.message.answer(str(e))
    await callback.answer()


@router.callback_query(F.data == "man_spin")
async def random_spin_handler(callback: types.CallbackQuery, bot: Bot):
    try:
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        balance = await remove_balance(user_id=callback.from_user.id, amount_to_remove=Decimal(250))
        if balance is False:
            await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            return
        message = await bot.send_dice(callback.message.chat.id, emoji='üé∞')
        await asyncio.sleep(2)
        await message.delete()

        character = await spin_character(user_id=callback.from_user.id, sex=Sex.MALE)
        user_photo_path = f"./media/wifes/{character.id}/profile.png"
        default_photo_path = "./media/wifes/default/default.png"

        if os.path.exists(user_photo_path) and os.path.isfile(user_photo_path):
            photo = types.FSInputFile(path=user_photo_path)
        else:
            photo = types.FSInputFile(path=default_photo_path)

        await callback.message.answer_photo(photo=photo, caption=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {character.name} ({character.rare.value})")
    except ValueError as e:
        await callback.message.answer(str(e))
    await callback.answer()


@router.callback_query(F.data == "women_spin")
async def random_spin_handler(callback: types.CallbackQuery, bot: Bot):
    try:
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        balance = await remove_balance(user_id=callback.from_user.id, amount_to_remove=Decimal(250))
        if balance is False:
            await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            return
        message = await bot.send_dice(callback.message.chat.id, emoji='üé∞')
        await asyncio.sleep(2)
        await message.delete()
        
        character = await spin_character(user_id=callback.from_user.id, sex=Sex.WOMEN)
        user_photo_path = f"./media/wifes/{character.id}/profile.png"
        default_photo_path = "./media/wifes/default/default.png"

        if os.path.exists(user_photo_path) and os.path.isfile(user_photo_path):
            photo = types.FSInputFile(path=user_photo_path)
        else:
            photo = types.FSInputFile(path=default_photo_path)

        await callback.message.answer_photo(photo=photo, caption=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {character.name} ({character.rare.value})")
    except ValueError as e:
        await callback.message.answer(str(e))
    await callback.answer()