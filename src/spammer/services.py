from aiogram.exceptions import TelegramForbiddenError
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from src.database.models import ProductGroups
from src.database.orm.groups import get_random_group
from src.database.orm.users import get_users
from src.logger import setup_logger


class SpammerService:
    def __init__(self):
        self.logger = setup_logger(__name__)


    async def _create_message(self):
        self.default_message = """üéâ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —ç—Ç—É –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å! üéâ\n
üí† –ò –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å –≤ –≤–∏–¥–µ –≤–∞–ª—é—Ç—ã! üí†"""
        group = await get_random_group()
        self.group_link = group.group_link
        self.default_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"sub_{group.id}")],
            ]
        )

    async def spam(self, bot, user_id):
        users = await get_users()
        count = 0

        for i in users:
            await self._create_message()
            try:
                await bot.send_message(chat_id=i.user_id, text=f"{self.default_message}\n\n<a href='{self.group_link}'>üëâ–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É</a>", reply_markup=self.default_keyboard, parse_mode="HTML")
                count += 1
            except TelegramForbiddenError as te:
                self.logger.warning(te)
                continue
            except Exception as ex:
                self.logger.warning(ex)
                continue

        await bot.send_message(chat_id=user_id,
            text=f"‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
             f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
             f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}\n"
             f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n",
        parse_mode="Markdown")